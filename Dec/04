// task to students: open a file specified in command line arguments

//Arguments of main

/* links
1) https://www.tutorialspoint.com/cprogramming/c_command_line_arguments.htm - examples of using arguments of main
2) Б.В. Керниган, Д.М. Ричи. - 5.11. КОМАНДНАЯ СТРОКА АРГУМЕНТОВ стр. 117 (зависит от издания, вероятно)
3) https://ru.wikibooks.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%A1%D0%B8_%D0%B2_%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D0%B0%D1%85/%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%B0%D1%80%D0%B3%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2_%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%BD%D0%BE%D0%B9_%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8 - examples of using arguments of main, with description in Russian
*/

#include <stdio.h>

int main( int argc, char * argv[] )  { // arguments of main
	// int argc - number of arguments, always >= 1, because name of the program (e.g., ./a.out) is also counted
	// char * argv[] or also char ** argv - a pointer to an array of strings
	// argv[0] - contains name of a program,
	// argv[1] - contains 1st argument of a program,

   if( argc == 2 ) {
      printf("The argument supplied is %s\n", argv[1]); // print each element of an array as a string (%s)
   }
   else if( argc > 2 ) {
      printf("Too many arguments supplied.\n");
   }
   else {
      printf("One argument expected.\n");
   }
   
	return 0;
}


////////////////////////


// Files

/* links
1) http://acm.mipt.ru/twiki/pub/Cintro/ForPreps/c_8.pdf
2) Б.В. Керниган, Д.М. Ричи. - 7.6. ДОСТУП К ФАЙЛАМ 157
*/

#include <stdio.h>

int main() {
	
	// open file
	FILE * fd; // a file descriptor // can be considered as a "pointer" to a file
	fd = fopen ("example.txt", "w");
	if (fd == NULL)
		printf("Error");

	fprintf (fd, "Sapere aude!"); // Fprintf, almost like usual printf
	fprintf (fd, "%d", 42);

	// close file
	fclose (fd);


//next example


	// open file
	FILE * in = fopen ("example.txt", "r"); // open for read
	FILE * out = fopen ("example_v2.txt", "w"); // open for write
	
	// copy each symbol
	int c;
	while ( (c=fgetc(in)) != EOF )
		fputc (c, out);
	
	// close file
	fclose (in);
	fclose (out);

	return 0;
}

